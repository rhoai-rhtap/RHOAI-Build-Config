name: Push To Stage
run-name: Push To Stage
on:
  workflow_dispatch:
    inputs:
      release_branch:
        description: 'Release Branch'
        required: true
        default: 'rhoai-2.13'
      rhoai_version:
        description: 'Current RHOAI version, eg v2.14.0'
        required: true
        default: 'v2.13.0'
      fbc_image_uri:
        description: 'Full image uri of the FBC fragment image'
        default: 'LATEST_NIGHTLY'
      forced_slack_notification:
        type: choice
        description: Send duplicate slack notification
        default: No
        options:
          - No
          - Yes
permissions:
  contents: write
env:
  GITHUB_ORG: rhoai-rhtap
  GITHUB_RKA_ORG: rhoai-rhtap

jobs:
  push-to-stage:
    if: ${{ github.ref_name == 'main' }}
    runs-on: ubuntu-latest
    container:
      image: quay.io/rhoai/rhoai-task-toolset:latest
      options: --privileged
    steps:
      - name: Git checkout RBC main
        uses: actions/checkout@v4
        with:
          ref: main
          path: main
          sparse-checkout: |
            pcc
            catalog/${{ github.event.inputs.release_branch }}
          sparse-checkout-cone-mode: false
      - name: Git checkout RBC Release Latest
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.release_branch }}
          path: latest_rbc_release
          sparse-checkout: |
            config/build-config.yaml
          sparse-checkout-cone-mode: false
      - name: Install dependencies
        env:
          RHOAI_QUAY_RO_USERNAME: ${{ secrets.RHOAI_QUAY_RO_USERNAME }}
          RHOAI_QUAY_RO_TOKEN: ${{ secrets.RHOAI_QUAY_RO_TOKEN }}
        run: |
          os="$(uname -s | tr '[:upper:]' '[:lower:]')"
          arch="$(uname -m | sed 's/x86_64/amd64/')"
          yq_version="v4.44.3"
          yq_filename="yq-$yq_version"
          echo "-> Downloading yq" >&2
          curl -sSfLo "$yq_filename" "https://github.com/mikefarah/yq/releases/download/$yq_version/yq_${os}_${arch}"
          chmod +x $yq_filename
          ln -s $yq_filename yq
          cp $yq_filename /usr/local/bin/yq
          
          microdnf install -y skopeo && \
              microdnf clean all && rm -rf /var/cache/dnf/*
          skopeo login -u "${RHOAI_QUAY_RO_USERNAME}" -p "${RHOAI_QUAY_RO_TOKEN}" quay.io/rhoai
      - name: Validate FBC Image
        id: validate-fbc-image
        run: |
          BASE_URI=docker://quay.io/rhoai/rhoai-fbc-fragment
          release_branch=${{ github.event.inputs.release_branch }}
          image_uri=${{ github.event.inputs.fbc_image_uri }}
          if [[ $image_uri == LATEST_NIGHTLY ]]; then image_uri=${BASE_URI}:${release_branch}-nightly; fi
          if [[ "$image_uri" != docker* ]]; then image_uri="docker://${image_uri}"; fi
          
          META=$(skopeo inspect "${image_uri}")
          DIGEST=$(echo $META | jq -r .Digest)
          image_uri=${BASE_URI}@${DIGEST}
          GIT_COMMIT=$(echo $META | jq -r '.Labels | ."git.commit"')
          SIG_TAG=${DIGEST/:/-}.sig
          SIG_DIGEST=$(skopeo inspect ${BASE_URI}:${SIG_TAG}  | jq -r .Digest)
          if [[ -z $SIG_DIGEST ]]; then echo "Invalid FBC image, no valid signatures found."; exit 1; fi
          echo "Valid signature found with the digest - ${SIG_DIGEST}"
          echo "Validation successful, preparing to push the image to stage - ${image_uri}"
          
          ref=${DIGEST}
          echo "ref=${GIT_COMMIT}" >> $GITHUB_OUTPUT
          echo "digest=${DIGEST}" >> $GITHUB_OUTPUT
          echo "image_uri=${image_uri}" >> $GITHUB_OUTPUT
          echo "ref=$ref"
      - name: Git checkout RBC release commit
        uses: actions/checkout@v4
        with:
          ref: ${{ steps.validate-fbc-image.outputs.ref }}
          path: ${{ github.event.inputs.release_branch }}
      - name: Git checkout utils
        uses: actions/checkout@v4
        with:
          repository: ${{ env.GITHUB_RKA_ORG }}/RHOAI-Konflux-Automation
          ref: dchouras
          path: utils
      - name: Install python dependencies
        run: |
          pip install -r utils/utils/bundle-processor/requirements.txt
      - name: Check if PCC Cache Valid
        id: check-if-pcc-cache-valid
        env:
          RHOAI_CATALOG_SA_USERNAME: ${{ secrets.RHOAI_CATALOG_SA_USERNAME }}
          RHOAI_CATALOG_SA_TOKEN: ${{ secrets.RHOAI_CATALOG_SA_TOKEN }}
        run: |
          microdnf install -y coreutils-single && \
              microdnf clean all && rm -rf /var/cache/dnf/*
          PCC_CACHE_VALID=YES
          skopeo login registry.redhat.io -u "${RHOAI_CATALOG_SA_USERNAME}" -p "${RHOAI_CATALOG_SA_TOKEN}"
          skopeo list-tags docker://registry.redhat.io/rhoai/odh-operator-bundle | jq -r '.Tags | .[] | select(. | startswith ("v"))' | sort > latest_shipped_rhoai_versions.txt
          echo "latest_shipped_rhoai_versions = "
          cat latest_shipped_rhoai_versions.txt
          echo "shipped_rhoai_versions = "
          cat main/pcc/shipped_rhoai_versions.txt
          
          #diff=$(cmp --silent latest_shipped_rhoai_versions.txt main/pcc/shipped_rhoai_versions.txt || echo "files are different")
          diff=$(python -c 'print(list(set(open("latest_shipped_rhoai_versions.txt").readlines()) - set(open("main/pcc/shipped_rhoai_versions.txt").readlines())).__len__())')
          
          if [[ $diff -gt 0 ]]
          then
            diff=$(python -c 'print(list(set(open("latest_shipped_rhoai_versions.txt").readlines()) - set(open("main/pcc/shipped_rhoai_versions.txt").readlines())))')
            echo "following new versions are shipped - $diff"
            cp latest_shipped_rhoai_versions.txt main/pcc/shipped_rhoai_versions.txt
            PCC_CACHE_VALID=NO
          fi
          echo "PCC_CACHE_VALID=${PCC_CACHE_VALID}" >> $GITHUB_OUTPUT
      - name: Regenerate PCC Cache
        id: regenerate-pcc-cache
        if: ${{ steps.check-if-pcc-cache-valid.outputs.PCC_CACHE_VALID == 'NO' }}
        env:
          BRANCH: ${{ github.event.inputs.release_branch }}
          RHOAI_VERSION: ${{ github.event.inputs.rhoai_version }}
        run: |
          #install opm cli
          os="$(uname -s | tr '[:upper:]' '[:lower:]')"
          arch="$(uname -m | sed 's/x86_64/amd64/')"
          opm_version="v1.47.0"
          opm_filename="opm-$opm_version"
          echo "-> Downloading opm" >&2
          curl -sSfLo "$opm_filename" "https://github.com/operator-framework/operator-registry/releases/download/$opm_version/$os-$arch-opm"
          chmod +x "$opm_filename"
          ln -fs "$opm_filename" opm
          cp "$opm_filename" /usr/local/bin/opm
          
          microdnf install -y findutils && \
              microdnf clean all && rm -rf /var/cache/dnf/*
          
          #Declare basic variables
          COMPONENT_SUFFIX=${RHOAI_VERSION/./-}
          OPERATOR_BUNDLE_COMPONENT_NAME=odh-operator-bundle

          #Declare FBC processing variables
          BUILD_CONFIG_PATH=${BRANCH}/config/build-config.yaml
          PATCH_YAML_PATH=${BRANCH}/catalog/catalog-patch.yaml
          
          CATALOG_GENERATION_REF_OCP_VERSION=v4.17
          CSV_META_MIN_OCP_VERSION=417
          BUNDLE_OBJECT_CATALOG_YAML_PATH=bundle_object_catalog.yaml
          CSV_META_CATALOG_YAML_PATH=csv_meta_catalog.yaml
          
          opm migrate registry.redhat.io/redhat/redhat-operator-index:${CATALOG_GENERATION_REF_OCP_VERSION} ./catalog-migrate
          opm alpha convert-template basic catalog-migrate/rhods-operator/catalog.json -o yaml > catalog-template.yaml
          opm alpha render-template basic catalog-template.yaml -o yaml > ${BUNDLE_OBJECT_CATALOG_YAML_PATH}
          opm alpha render-template basic catalog-template.yaml --migrate-level=bundle-object-to-csv-metadata -o yaml > ${CSV_META_CATALOG_YAML_PATH}
          
          while IFS= read -r value;
          do
              OPENSHIFT_VERSION=$value
              NUMERIC_OCP_VERSION=${OPENSHIFT_VERSION/v4./4}
              echo "OPENSHIFT_VERSION=$OPENSHIFT_VERSION"
          
              CATALOG_YAML_PATH=${BUNDLE_OBJECT_CATALOG_YAML_PATH}
              CATALOG_DIR=main/pcc/${OPENSHIFT_VERSION}/rhods-operator
              mkdir -p ${CATALOG_DIR}
          
              if [[ $NUMERIC_OCP_VERSION -ge $CSV_META_MIN_OCP_VERSION ]]
              then
                CATALOG_YAML_PATH=${CSV_META_CATALOG_YAML_PATH}
              fi
              cp ${CATALOG_YAML_PATH} ${CATALOG_DIR}/catalog.yaml
          done < <(find main/pcc/ -maxdepth 1 -mindepth 1 -type d -printf '%f\n')
          
          ls -l main/pcc/*/
      - name: Push latest PCC Cache
        if: ${{ steps.check-if-pcc-cache-valid.outputs.PCC_CACHE_VALID == 'NO' }}
        uses: actions-js/push@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: main
          message: "Regeneratd the PCC Cache"
          repository: ${{ env.GITHUB_ORG }}/RHOAI-Build-Config
          directory: main
          author_name: Openshift-AI DevOps
          author_email: openshift-ai-devops@redhat.com

      - name: Push To Stage
        id: push-to-stage
        env:
          BRANCH: ${{ github.event.inputs.release_branch }}
          RHOAI_VERSION: ${{ github.event.inputs.rhoai_version }}
          COMMIT: ${{ github.event.inputs.commit }}
        run: |
          #Declare basic variables
          COMPONENT_SUFFIX=${RHOAI_VERSION/./-}
          OPERATOR_BUNDLE_COMPONENT_NAME=odh-operator-bundle

          #Declare FBC processing variables
          BUILD_CONFIG_PATH=${BRANCH}/config/build-config.yaml
          PATCH_YAML_PATH=${BRANCH}/catalog/catalog-patch.yaml

          while IFS= read -r value;
          do
              OPENSHIFT_VERSION=$value
              echo "OPENSHIFT_VERSION=$OPENSHIFT_VERSION"
              CATALOG_YAML_PATH=main/pcc/${OPENSHIFT_VERSION}/rhods-operator/catalog.yaml
              RELEASE_CATALOG_YAML_PATH=${BRANCH}/catalog/${OPENSHIFT_VERSION}/rhods-operator/catalog.yaml
              OUTPUT_CATALOG_PATH=main/catalog/${BRANCH}/${OPENSHIFT_VERSION}/rhods-operator/catalog.yaml

              #Invoke the stage promoter to patch the main catalog with release branch
              python3 utils/utils/stage-promoter/stage_promoter.py -op stage-catalog-patch -c ${CATALOG_YAML_PATH} -p ${PATCH_YAML_PATH} -r ${RELEASE_CATALOG_YAML_PATH} -o ${OUTPUT_CATALOG_PATH} -v ${RHOAI_VERSION}
          done < <(yq eval '.config.supported-ocp-versions.build[].name' $BUILD_CONFIG_PATH)
          
          git -C main/catalog/${BRANCH} status
          GIT_STATUS=$(git -C main/catalog/${BRANCH} status)
          CATALOGS_CHANGED=YES
          if [[ $GIT_STATUS == *"nothing to commit"* ]]; then CATALOGS_CHANGED=NO; fi
          echo "CATALOGS_CHANGED=${CATALOGS_CHANGED}" >> $GITHUB_OUTPUT

      - name: Commit and push the changes to main branch
        if: ${{ steps.push-to-stage.outputs.CATALOGS_CHANGED == 'YES' }}
        uses: actions-js/push@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: main
          message: "Patching the stage catalog with ${{ github.event.inputs.release_branch }} ${{ github.event.inputs.commit }}"
          repository: ${{ env.GITHUB_ORG }}/RHOAI-Build-Config
          directory: main
          author_name: Openshift-AI DevOps
          author_email: openshift-ai-devops@redhat.com
      - name: Monitor FBC builds
        if: ${{ steps.push-to-stage.outputs.CATALOGS_CHANGED == 'YES' || github.event.inputs.forced_slack_notification == 'true' }}
        id: monitor-fbc-builds
        env:
          BRANCH: ${{ github.event.inputs.release_branch }}
          RHOAI_VERSION: ${{ github.event.inputs.rhoai_version }}
          RHOAI_QUAY_RO_USERNAME: ${{ secrets.RHOAI_QUAY_RO_USERNAME }}
          RHOAI_QUAY_RO_TOKEN: ${{ secrets.RHOAI_QUAY_RO_TOKEN }}
          RHOAI_QUAY_API_TOKEN: ${{ secrets.RHOAI_QUAY_API_TOKEN }}
        run: |
          LATEST_RBC_MAIN_COMMIT=$(git -C main log -1 | grep ^commit | cut -d " " -f 2)
          BUILD_CONFIG_PATH=latest_rbc_release/config/build-config.yaml
          python3 -u utils/utils/stage-promoter/stage_promoter.py -op monitor-fbc-builds -o utils/fbc_images.json -v ${BRANCH} --timeout 20 -b ${BUILD_CONFIG_PATH} --git-commit ${LATEST_RBC_MAIN_COMMIT}
          SLACK_MESSAGE=$(cat utils/slack_message.txt)
          echo "SLACK_MESSAGE=${SLACK_MESSAGE}" >> $GITHUB_OUTPUT

      - name: Send Slack Notification
        if: ${{ success() && ( steps.push-to-stage.outputs.CATALOGS_CHANGED == 'YES' || github.event.inputs.forced_slack_notification == 'true' ) }}
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_MESSAGE: '${{ steps.monitor-fbc-builds.outputs.SLACK_MESSAGE }}'
          SLACK_WEBHOOK: ${{ secrets.SLACK_NOTIFICATIONS_WEBHOOK }}